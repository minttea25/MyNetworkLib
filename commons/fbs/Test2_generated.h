// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST2_TEST_H_
#define FLATBUFFERS_GENERATED_TEST2_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

#include "Test_generated.h"

namespace Test {

struct Player;
struct PlayerBuilder;

struct Magician;
struct MagicianBuilder;

struct Warrior;
struct WarriorBuilder;

enum Jobs : uint8_t {
  Jobs_NONE = 0,
  Jobs_Magician = 1,
  Jobs_Warrior = 2,
  Jobs_MIN = Jobs_NONE,
  Jobs_MAX = Jobs_Warrior
};

inline const Jobs (&EnumValuesJobs())[3] {
  static const Jobs values[] = {
    Jobs_NONE,
    Jobs_Magician,
    Jobs_Warrior
  };
  return values;
}

inline const char * const *EnumNamesJobs() {
  static const char * const names[4] = {
    "NONE",
    "Magician",
    "Warrior",
    nullptr
  };
  return names;
}

inline const char *EnumNameJobs(Jobs e) {
  if (::flatbuffers::IsOutRange(e, Jobs_NONE, Jobs_Warrior)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesJobs()[index];
}

template<typename T> struct JobsTraits {
  static const Jobs enum_value = Jobs_NONE;
};

template<> struct JobsTraits<Test::Magician> {
  static const Jobs enum_value = Jobs_Magician;
};

template<> struct JobsTraits<Test::Warrior> {
  static const Jobs enum_value = Jobs_Warrior;
};

bool VerifyJobs(::flatbuffers::Verifier &verifier, const void *obj, Jobs type);
bool VerifyJobsVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Player FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_POS = 6,
    VT_JOB_TYPE = 8,
    VT_JOB = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const Test::Vec3 *pos() const {
    return GetStruct<const Test::Vec3 *>(VT_POS);
  }
  Test::Jobs job_type() const {
    return static_cast<Test::Jobs>(GetField<uint8_t>(VT_JOB_TYPE, 0));
  }
  const void *job() const {
    return GetPointer<const void *>(VT_JOB);
  }
  template<typename T> const T *job_as() const;
  const Test::Magician *job_as_Magician() const {
    return job_type() == Test::Jobs_Magician ? static_cast<const Test::Magician *>(job()) : nullptr;
  }
  const Test::Warrior *job_as_Warrior() const {
    return job_type() == Test::Jobs_Warrior ? static_cast<const Test::Warrior *>(job()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<Test::Vec3>(verifier, VT_POS, 4) &&
           VerifyField<uint8_t>(verifier, VT_JOB_TYPE, 1) &&
           VerifyOffset(verifier, VT_JOB) &&
           VerifyJobs(verifier, job(), job_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Test::Magician *Player::job_as<Test::Magician>() const {
  return job_as_Magician();
}

template<> inline const Test::Warrior *Player::job_as<Test::Warrior>() const {
  return job_as_Warrior();
}

struct PlayerBuilder {
  typedef Player Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Player::VT_NAME, name);
  }
  void add_pos(const Test::Vec3 *pos) {
    fbb_.AddStruct(Player::VT_POS, pos);
  }
  void add_job_type(Test::Jobs job_type) {
    fbb_.AddElement<uint8_t>(Player::VT_JOB_TYPE, static_cast<uint8_t>(job_type), 0);
  }
  void add_job(::flatbuffers::Offset<void> job) {
    fbb_.AddOffset(Player::VT_JOB, job);
  }
  explicit PlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Player> CreatePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    const Test::Vec3 *pos = nullptr,
    Test::Jobs job_type = Test::Jobs_NONE,
    ::flatbuffers::Offset<void> job = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_job(job);
  builder_.add_pos(pos);
  builder_.add_name(name);
  builder_.add_job_type(job_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Player> CreatePlayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const Test::Vec3 *pos = nullptr,
    Test::Jobs job_type = Test::Jobs_NONE,
    ::flatbuffers::Offset<void> job = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Test::CreatePlayer(
      _fbb,
      name__,
      pos,
      job_type,
      job);
}

struct Magician FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MagicianBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MAGIC = 4
  };
  int32_t magic() const {
    return GetField<int32_t>(VT_MAGIC, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_MAGIC, 4) &&
           verifier.EndTable();
  }
};

struct MagicianBuilder {
  typedef Magician Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_magic(int32_t magic) {
    fbb_.AddElement<int32_t>(Magician::VT_MAGIC, magic, 0);
  }
  explicit MagicianBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Magician> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Magician>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Magician> CreateMagician(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t magic = 0) {
  MagicianBuilder builder_(_fbb);
  builder_.add_magic(magic);
  return builder_.Finish();
}

struct Warrior FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef WarriorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATTACK = 4
  };
  int16_t attack() const {
    return GetField<int16_t>(VT_ATTACK, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ATTACK, 2) &&
           verifier.EndTable();
  }
};

struct WarriorBuilder {
  typedef Warrior Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_attack(int16_t attack) {
    fbb_.AddElement<int16_t>(Warrior::VT_ATTACK, attack, 0);
  }
  explicit WarriorBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Warrior> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Warrior>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Warrior> CreateWarrior(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t attack = 0) {
  WarriorBuilder builder_(_fbb);
  builder_.add_attack(attack);
  return builder_.Finish();
}

inline bool VerifyJobs(::flatbuffers::Verifier &verifier, const void *obj, Jobs type) {
  switch (type) {
    case Jobs_NONE: {
      return true;
    }
    case Jobs_Magician: {
      auto ptr = reinterpret_cast<const Test::Magician *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Jobs_Warrior: {
      auto ptr = reinterpret_cast<const Test::Warrior *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyJobsVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyJobs(
        verifier,  values->Get(i), types->GetEnum<Jobs>(i))) {
      return false;
    }
  }
  return true;
}

inline const Test::Player *GetPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<Test::Player>(buf);
}

inline const Test::Player *GetSizePrefixedPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test::Player>(buf);
}

inline bool VerifyPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::Player>(nullptr);
}

inline bool VerifySizePrefixedPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::Player>(nullptr);
}

inline void FinishPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Player> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::Player> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_TEST2_TEST_H_
