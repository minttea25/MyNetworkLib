// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKET_TEST_H_
#define FLATBUFFERS_GENERATED_PACKET_TEST_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 24 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 7,
             "Non-compatible flatbuffers version included");

namespace Test {

struct TestPacket;
struct TestPacketBuilder;

struct TestPacket FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef TestPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MSG = 4,
    VT_NUMBER = 6
  };
  const ::flatbuffers::String *msg() const {
    return GetPointer<const ::flatbuffers::String *>(VT_MSG);
  }
  int32_t number() const {
    return GetField<int32_t>(VT_NUMBER, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MSG) &&
           verifier.VerifyString(msg()) &&
           VerifyField<int32_t>(verifier, VT_NUMBER, 4) &&
           verifier.EndTable();
  }
};

struct TestPacketBuilder {
  typedef TestPacket Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_msg(::flatbuffers::Offset<::flatbuffers::String> msg) {
    fbb_.AddOffset(TestPacket::VT_MSG, msg);
  }
  void add_number(int32_t number) {
    fbb_.AddElement<int32_t>(TestPacket::VT_NUMBER, number, 0);
  }
  explicit TestPacketBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<TestPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<TestPacket>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<TestPacket> CreateTestPacket(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> msg = 0,
    int32_t number = 0) {
  TestPacketBuilder builder_(_fbb);
  builder_.add_number(number);
  builder_.add_msg(msg);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<TestPacket> CreateTestPacketDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *msg = nullptr,
    int32_t number = 0) {
  auto msg__ = msg ? _fbb.CreateString(msg) : 0;
  return Test::CreateTestPacket(
      _fbb,
      msg__,
      number);
}

inline const Test::TestPacket *GetTestPacket(const void *buf) {
  return ::flatbuffers::GetRoot<Test::TestPacket>(buf);
}

inline const Test::TestPacket *GetSizePrefixedTestPacket(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Test::TestPacket>(buf);
}

inline bool VerifyTestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Test::TestPacket>(nullptr);
}

inline bool VerifySizePrefixedTestPacketBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Test::TestPacket>(nullptr);
}

inline void FinishTestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::TestPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestPacketBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Test::TestPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Test

#endif  // FLATBUFFERS_GENERATED_PACKET_TEST_H_
